// api-server/__tests__/services/chat/approvalTools.test.ts
import { approvalTools } from '../../../src/services/chat/tools/approvalTools.js';
import * as approvalRulesService from '../../../src/services/stockTransfers/approvalRulesService.js';
import * as transferService from '../../../src/services/stockTransfers/stockTransferService.js';
import { receiveStock } from '../../../src/services/stockService.js';
import {
  createTestUser,
  createTestTenant,
  createTestProduct,
  createTestBranch,
  createTestRoleWithPermissions,
  createTestMembership,
  addUserToBranch,
} from '../../helpers/factories.js';

describe('[CHAT-APPROVAL-001] AI Chat Approval Tools', () => {
  let testTenant: Awaited<ReturnType<typeof createTestTenant>>;
  let testUser: Awaited<ReturnType<typeof createTestUser>>;
  let managerRole: Awaited<ReturnType<typeof createTestRoleWithPermissions>>;
  let directorRole: Awaited<ReturnType<typeof createTestRoleWithPermissions>>;
  let sourceBranch: Awaited<ReturnType<typeof createTestBranch>>;
  let destinationBranch: Awaited<ReturnType<typeof createTestBranch>>;
  let product1: Awaited<ReturnType<typeof createTestProduct>>;
  let approvalRule1: Awaited<ReturnType<typeof approvalRulesService.createApprovalRule>>;
  let approvalRule2: Awaited<ReturnType<typeof approvalRulesService.createApprovalRule>>;

  beforeEach(async () => {
    // Create tenant and user
    testTenant = await createTestTenant();
    testUser = await createTestUser();

    // Create branches
    sourceBranch = await createTestBranch({
      tenantId: testTenant.id,
      name: 'Main Warehouse',
    });

    destinationBranch = await createTestBranch({
      tenantId: testTenant.id,
      name: 'Store A',
    });

    // Create roles
    managerRole = await createTestRoleWithPermissions({
      tenantId: testTenant.id,
      name: 'MANAGER',
      permissionKeys: ['products:read', 'stock:read', 'stock:write'],
    });

    directorRole = await createTestRoleWithPermissions({
      tenantId: testTenant.id,
      name: 'DIRECTOR',
      permissionKeys: ['products:read', 'stock:read', 'stock:write'],
    });

    const role = await createTestRoleWithPermissions({
      tenantId: testTenant.id,
      permissionKeys: ['products:read', 'stock:read', 'stock:write'],
    });

    await createTestMembership({
      userId: testUser.id,
      tenantId: testTenant.id,
      roleId: role.id,
    });

    await addUserToBranch(testUser.id, testTenant.id, sourceBranch.id);
    await addUserToBranch(testUser.id, testTenant.id, destinationBranch.id);

    // Create product
    product1 = await createTestProduct({
      tenantId: testTenant.id,
      name: 'High Value Widget',
      sku: 'HVW-001',
      pricePence: 10000, // £100.00
    });

    // Add stock
    await receiveStock(
      { currentTenantId: testTenant.id, currentUserId: testUser.id },
      {
        branchId: sourceBranch.id,
        productId: product1.id,
        qty: 1000,
        unitCostPence: 10000,
      }
    );

    // Create approval rules
    approvalRule1 = await approvalRulesService.createApprovalRule({
      tenantId: testTenant.id,
      userId: testUser.id,
      data: {
        name: 'High Value Transfers',
        description: 'Transfers over £500 require two-level approval',
        isActive: true,
        priority: 100,
        approvalMode: 'SEQUENTIAL',
        conditions: [
          {
            conditionType: 'VALUE_THRESHOLD',
            threshold: 500, // £500
          },
        ],
        levels: [
          {
            level: 1,
            name: 'Manager Approval',
            requiredRoleId: managerRole.id,
          },
          {
            level: 2,
            name: 'Director Approval',
            requiredRoleId: directorRole.id,
          },
        ],
      },
    });

    approvalRule2 = await approvalRulesService.createApprovalRule({
      tenantId: testTenant.id,
      userId: testUser.id,
      data: {
        name: 'Urgent Transfers',
        description: 'All urgent transfers require immediate manager approval',
        isActive: true,
        priority: 90,
        approvalMode: 'SEQUENTIAL',
        conditions: [
          {
            conditionType: 'PRIORITY',
          },
        ],
        levels: [
          {
            level: 1,
            name: 'Manager Approval',
            requiredRoleId: managerRole.id,
          },
        ],
      },
    });
  });

  describe('[AC-APPROVAL-001] listApprovalRules', () => {
    it('should list all approval rules', async () => {
      const tools = approvalTools({
        userId: testUser.id,
        tenantId: testTenant.id,
      });

      const result = await tools.listApprovalRules.execute({});

      expect(result.rules.length).toBeGreaterThanOrEqual(2);
      expect(result.rules.some((r) => r.name === 'High Value Transfers')).toBe(true);
      expect(result.rules.some((r) => r.name === 'Urgent Transfers')).toBe(true);
    });

    it('should filter by active status', async () => {
      // Create inactive rule
      await approvalRulesService.createApprovalRule({
        tenantId: testTenant.id,
        userId: testUser.id,
        data: {
          name: 'Inactive Rule',
          isActive: false,
          priority: 50,
          approvalMode: 'SEQUENTIAL',
          conditions: [{ conditionType: 'VALUE_THRESHOLD', threshold: 1000 }],
          levels: [{ level: 1, name: 'Test', requiredRoleId: managerRole.id }],
        },
      });

      const tools = approvalTools({
        userId: testUser.id,
        tenantId: testTenant.id,
      });

      const result = await tools.listApprovalRules.execute({
        isActive: true,
      });

      expect(result.rules.every((r) => r.isActive === true)).toBe(true);
      expect(result.rules.some((r) => r.name === 'Inactive Rule')).toBe(false);
    });

    it('should show rule details including approval mode', async () => {
      const tools = approvalTools({
        userId: testUser.id,
        tenantId: testTenant.id,
      });

      const result = await tools.listApprovalRules.execute({});

      const highValueRule = result.rules.find((r) => r.name === 'High Value Transfers');
      expect(highValueRule?.approvalMode).toBe('SEQUENTIAL');
      expect(highValueRule?.priority).toBe(100);
    });

    it('should show condition count and level count', async () => {
      const tools = approvalTools({
        userId: testUser.id,
        tenantId: testTenant.id,
      });

      const result = await tools.listApprovalRules.execute({});

      const highValueRule = result.rules.find((r) => r.name === 'High Value Transfers');
      expect(highValueRule?.conditionCount).toBe(1);
      expect(highValueRule?.levelCount).toBe(2);
    });

    it('should show approval levels with roles', async () => {
      const tools = approvalTools({
        userId: testUser.id,
        tenantId: testTenant.id,
      });

      const result = await tools.listApprovalRules.execute({});

      const highValueRule = result.rules.find((r) => r.name === 'High Value Transfers');
      expect(highValueRule?.levels.length).toBe(2);
      expect(highValueRule?.levels[0]?.requiredRole).toBe('MANAGER');
      expect(highValueRule?.levels[1]?.requiredRole).toBe('DIRECTOR');
    });

    it('should sort by priority (descending)', async () => {
      const tools = approvalTools({
        userId: testUser.id,
        tenantId: testTenant.id,
      });

      const result = await tools.listApprovalRules.execute({});

      // High Value Transfers (priority 100) should come before Urgent Transfers (priority 90)
      const highValueIndex = result.rules.findIndex((r) => r.name === 'High Value Transfers');
      const urgentIndex = result.rules.findIndex((r) => r.name === 'Urgent Transfers');
      expect(highValueIndex).toBeLessThan(urgentIndex);
    });

    it('should respect limit parameter', async () => {
      const tools = approvalTools({
        userId: testUser.id,
        tenantId: testTenant.id,
      });

      const result = await tools.listApprovalRules.execute({
        limit: 1,
      });

      expect(result.rules.length).toBeLessThanOrEqual(1);
    });

    it('should cap limit at 20', async () => {
      const tools = approvalTools({
        userId: testUser.id,
        tenantId: testTenant.id,
      });

      const result = await tools.listApprovalRules.execute({
        limit: 50,
      });

      expect(result.rules.length).toBeLessThanOrEqual(20);
    });

    it('should return empty result when no rules found', async () => {
      const newTenant = await createTestTenant();
      const newUser = await createTestUser();
      const newRole = await createTestRoleWithPermissions({
        tenantId: newTenant.id,
        permissionKeys: ['stock:read'],
      });
      await createTestMembership({
        userId: newUser.id,
        tenantId: newTenant.id,
        roleId: newRole.id,
      });

      const tools = approvalTools({
        userId: newUser.id,
        tenantId: newTenant.id,
      });

      const result = await tools.listApprovalRules.execute({});

      expect(result.rules).toEqual([]);
      expect(result.count).toBe(0);
      expect(result.message).toBe('No approval rules found');
    });
  });

  describe('[AC-APPROVAL-002] explainApprovalNeeds', () => {
    it('should explain why a high-value transfer requires approval', async () => {
      // Create high-value transfer (£1000)
      const transfer = await transferService.createStockTransfer({
        tenantId: testTenant.id,
        userId: testUser.id,
        data: {
          sourceBranchId: sourceBranch.id,
          destinationBranchId: destinationBranch.id,
          items: [{ productId: product1.id, qtyRequested: 10 }], // 10 * £100 = £1000
        },
      });

      const tools = approvalTools({
        userId: testUser.id,
        tenantId: testTenant.id,
      });

      const result = await tools.explainApprovalNeeds.execute({
        transferId: transfer.id,
      });

      expect(result.transferNumber).toBe(transfer.transferNumber);
      expect(result.requiresMultiLevelApproval).toBe(true);
      expect(result.applicableRules).toBeDefined();

      if (result.applicableRules) {
        expect(result.applicableRules.some((r) => r.name === 'High Value Transfers')).toBe(true);
      }
    });

    it('should explain approval by transfer number', async () => {
      const transfer = await transferService.createStockTransfer({
        tenantId: testTenant.id,
        userId: testUser.id,
        data: {
          sourceBranchId: sourceBranch.id,
          destinationBranchId: destinationBranch.id,
          items: [{ productId: product1.id, qtyRequested: 10 }],
        },
      });

      const tools = approvalTools({
        userId: testUser.id,
        tenantId: testTenant.id,
      });

      const result = await tools.explainApprovalNeeds.execute({
        transferNumber: transfer.transferNumber,
      });

      expect(result.transferNumber).toBe(transfer.transferNumber);
    });

    it('should indicate simple approval workflow for low-value transfers', async () => {
      // Create low-value transfer (£100)
      const transfer = await transferService.createStockTransfer({
        tenantId: testTenant.id,
        userId: testUser.id,
        data: {
          sourceBranchId: sourceBranch.id,
          destinationBranchId: destinationBranch.id,
          items: [{ productId: product1.id, qtyRequested: 1 }], // 1 * £100 = £100
        },
      });

      const tools = approvalTools({
        userId: testUser.id,
        tenantId: testTenant.id,
      });

      const result = await tools.explainApprovalNeeds.execute({
        transferId: transfer.id,
      });

      expect(result.requiresApproval).toBe(false);
      expect(result.message).toContain('simple approval workflow');
    });

    it('should show approval levels for multi-level approval', async () => {
      const transfer = await transferService.createStockTransfer({
        tenantId: testTenant.id,
        userId: testUser.id,
        data: {
          sourceBranchId: sourceBranch.id,
          destinationBranchId: destinationBranch.id,
          items: [{ productId: product1.id, qtyRequested: 10 }],
        },
      });

      const tools = approvalTools({
        userId: testUser.id,
        tenantId: testTenant.id,
      });

      const result = await tools.explainApprovalNeeds.execute({
        transferId: transfer.id,
      });

      if (result.applicableRules && result.applicableRules.length > 0) {
        const rule = result.applicableRules[0];
        expect(rule?.levels).toBeDefined();
        expect(rule?.levels.length).toBeGreaterThanOrEqual(1);
      }
    });

    it('should explain approval based on URGENT priority', async () => {
      const transfer = await transferService.createStockTransfer({
        tenantId: testTenant.id,
        userId: testUser.id,
        data: {
          sourceBranchId: sourceBranch.id,
          destinationBranchId: destinationBranch.id,
          priority: 'URGENT',
          items: [{ productId: product1.id, qtyRequested: 1 }],
        },
      });

      const tools = approvalTools({
        userId: testUser.id,
        tenantId: testTenant.id,
      });

      const result = await tools.explainApprovalNeeds.execute({
        transferId: transfer.id,
      });

      if (result.applicableRules) {
        expect(result.applicableRules.some((r) => r.name === 'Urgent Transfers')).toBe(true);
      }
    });

    it('should explain approval based on branch-specific rules', async () => {
      // Create branch-specific rule
      await approvalRulesService.createApprovalRule({
        tenantId: testTenant.id,
        userId: testUser.id,
        data: {
          name: 'Main Warehouse Rule',
          description: 'All transfers from Main Warehouse',
          isActive: true,
          priority: 80,
          approvalMode: 'SEQUENTIAL',
          conditions: [
            {
              conditionType: 'BRANCH_SPECIFIC',
              branchId: sourceBranch.id,
            },
          ],
          levels: [{ level: 1, name: 'Manager', requiredRoleId: managerRole.id }],
        },
      });

      const transfer = await transferService.createStockTransfer({
        tenantId: testTenant.id,
        userId: testUser.id,
        data: {
          sourceBranchId: sourceBranch.id,
          destinationBranchId: destinationBranch.id,
          items: [{ productId: product1.id, qtyRequested: 1 }],
        },
      });

      const tools = approvalTools({
        userId: testUser.id,
        tenantId: testTenant.id,
      });

      const result = await tools.explainApprovalNeeds.execute({
        transferId: transfer.id,
      });

      if (result.applicableRules) {
        expect(result.applicableRules.some((r) => r.name === 'Main Warehouse Rule')).toBe(true);
      }
    });

    it('should return error if transfer not found', async () => {
      const tools = approvalTools({
        userId: testUser.id,
        tenantId: testTenant.id,
      });

      const result = await tools.explainApprovalNeeds.execute({
        transferId: 'non-existent-id',
      });

      expect(result.error).toBe('Transfer not found');
    });

    it('should return error if neither ID nor number provided', async () => {
      const tools = approvalTools({
        userId: testUser.id,
        tenantId: testTenant.id,
      });

      const result = await tools.explainApprovalNeeds.execute({});

      expect(result.error).toBe('Transfer not found');
    });
  });

  describe('[AC-APPROVAL-003] Security - Tenant Isolation', () => {
    it('should not list approval rules from other tenants', async () => {
      const otherTenant = await createTestTenant();
      const otherUser = await createTestUser();
      const otherRole = await createTestRoleWithPermissions({
        tenantId: otherTenant.id,
        permissionKeys: ['stock:write'],
      });
      await createTestMembership({
        userId: otherUser.id,
        tenantId: otherTenant.id,
        roleId: otherRole.id,
      });

      const otherApprovalRole = await createTestRoleWithPermissions({
        tenantId: otherTenant.id,
        name: 'OTHER_MANAGER',
        permissionKeys: ['stock:write'],
      });

      const otherRule = await approvalRulesService.createApprovalRule({
        tenantId: otherTenant.id,
        userId: otherUser.id,
        data: {
          name: 'Other Tenant Rule',
          isActive: true,
          priority: 100,
          approvalMode: 'SEQUENTIAL',
          conditions: [{ conditionType: 'VALUE_THRESHOLD', threshold: 100 }],
          levels: [{ level: 1, name: 'Test', requiredRoleId: otherApprovalRole.id }],
        },
      });

      const tools = approvalTools({
        userId: testUser.id,
        tenantId: testTenant.id,
      });

      const result = await tools.listApprovalRules.execute({});

      expect(result.rules.some((r) => r.id === otherRule.id)).toBe(false);
    });

    it('should not explain approvals for transfers from other tenants', async () => {
      const otherTenant = await createTestTenant();
      const otherUser = await createTestUser();
      const otherBranch1 = await createTestBranch({ tenantId: otherTenant.id });
      const otherBranch2 = await createTestBranch({ tenantId: otherTenant.id });
      const otherProduct = await createTestProduct({ tenantId: otherTenant.id });

      const role = await createTestRoleWithPermissions({
        tenantId: otherTenant.id,
        permissionKeys: ['stock:write'],
      });
      await createTestMembership({
        userId: otherUser.id,
        tenantId: otherTenant.id,
        roleId: role.id,
      });
      await addUserToBranch(otherUser.id, otherTenant.id, otherBranch1.id);
      await addUserToBranch(otherUser.id, otherTenant.id, otherBranch2.id);

      await receiveStock(
        { currentTenantId: otherTenant.id, currentUserId: otherUser.id },
        { branchId: otherBranch1.id, productId: otherProduct.id, qty: 100, unitCostPence: 1000 }
      );

      const otherTransfer = await transferService.createStockTransfer({
        tenantId: otherTenant.id,
        userId: otherUser.id,
        data: {
          sourceBranchId: otherBranch1.id,
          destinationBranchId: otherBranch2.id,
          items: [{ productId: otherProduct.id, qtyRequested: 10 }],
        },
      });

      const tools = approvalTools({
        userId: testUser.id,
        tenantId: testTenant.id,
      });

      const result = await tools.explainApprovalNeeds.execute({
        transferId: otherTransfer.id,
      });

      expect(result.error).toBe('Transfer not found');
    });
  });

  describe('[AC-APPROVAL-004] Pagination', () => {
    it('should indicate if more rules are available', async () => {
      const tools = approvalTools({
        userId: testUser.id,
        tenantId: testTenant.id,
      });

      const result = await tools.listApprovalRules.execute({
        limit: 1,
      });

      if (result.count >= 1) {
        expect(result.hasMore).toBeDefined();
      }
    });
  });
});
