openapi: 3.1.0
info:
  title: Multi-Tenant Template API
  version: 0.1.0
  license:
    name: MIT
    identifier: MIT
servers:
  - url: https://api.yourdomain.com
    description: Prod (placeholder)
  - url: http://localhost:3001
    description: Dev
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ErrorResponse:
      type: object
      properties:
        error: { type: string }
        code:
          type: [string, "null"]
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, minLength: 8 }
    SessionUser:
      type: object
      properties:
        id: { type: string }
        email: { type: string, format: email }
        role: { type: string, enum: [OWNER, ADMIN, EDITOR] }
        tenantId: { type: string }
        tenantSlug: { type: string }
    LoginResponse:
      type: object
      properties:
        token: { type: string }
        user:
          $ref: '#/components/schemas/SessionUser'
    Post:
      type: object
      properties:
        id: { type: string }
        tenantId: { type: string }
        authorId: { type: string }
        title: { type: string }
        content:
          type: [string, "null"]
        status: { type: string, enum: [DRAFT, PUBLISHED, ARCHIVED] }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    PostCreate:
      type: object
      required: [title]
      properties:
        title: { type: string }
        content: { type: string }
        status: { type: string, enum: [DRAFT, PUBLISHED, ARCHIVED] }
    PostUpdate:
      type: object
      properties:
        title: { type: string }
        content:
          type: [string, "null"]
        status: { type: string, enum: [DRAFT, PUBLISHED, ARCHIVED] }

# Global security (all ops require JWT unless overridden with `security: []`)
security:
  - BearerAuth: []

paths:
  /health:
    get:
      operationId: healthCheck
      summary: Health check
      security: []           # public
      responses:
        '200': { description: OK }
        '400':
          description: Bad request
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  /t/{tenantSlug}/ping:
    get:
      operationId: tenantPing
      summary: Tenant ping
      security: []           # public
      parameters:
        - in: path
          name: tenantSlug
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
        '404':
          description: Unknown tenant
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  /t/{tenantSlug}/auth/login:
    post:
      operationId: login
      summary: Login for a tenant
      security: []           # public
      parameters:
        - in: path
          name: tenantSlug
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginRequest' }
      responses:
        '200':
          description: Token + user
          content:
            application/json:
              schema: { $ref: '#/components/schemas/LoginResponse' }
        '400':
          description: Bad request
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '403':
          description: Not a member of tenant
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  /t/{tenantSlug}/me:
    get:
      operationId: getMe
      summary: Current user for a tenant
      parameters:
        - in: path
          name: tenantSlug
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Current user
          content:
            application/json:
              schema:
                type: object
                properties:
                  user: { $ref: '#/components/schemas/SessionUser' }
        '401':
          description: Missing/invalid token
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '403':
          description: Token tenant mismatch
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  /t/{tenantSlug}/posts:
    get:
      operationId: listPosts
      summary: List posts (tenant-scoped)
      parameters:
        - in: path
          name: tenantSlug
          required: true
          schema: { type: string }
        - in: query
          name: status
          schema: { type: string, enum: [DRAFT, PUBLISHED, ARCHIVED] }
      responses:
        '200':
          description: Posts list
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items: { $ref: '#/components/schemas/Post' }
        '401':
          description: Missing/invalid token
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '403':
          description: Token tenant mismatch
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '400':
          description: Bad request
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

    post:
      operationId: createPost
      summary: Create post
      parameters:
        - in: path
          name: tenantSlug
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PostCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  post: { $ref: '#/components/schemas/Post' }
        '401':
          description: Missing/invalid token
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '403':
          description: Token tenant mismatch
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '400':
          description: Bad request
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  /t/{tenantSlug}/posts/{id}:
    patch:
      operationId: updatePost
      summary: Update post
      parameters:
        - in: path
          name: tenantSlug
          required: true
          schema: { type: string }
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PostUpdate' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  post: { $ref: '#/components/schemas/Post' }
        '401':
          description: Missing/invalid token
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '403':
          description: Token tenant mismatch
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '400':
          description: Bad request
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

    delete:
      operationId: deletePost
      summary: Delete post
      parameters:
        - in: path
          name: tenantSlug
          required: true
          schema: { type: string }
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204': { description: Deleted }
        '401':
          description: Missing/invalid token
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '403':
          description: Token tenant mismatch
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '400':
          description: Bad request
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
