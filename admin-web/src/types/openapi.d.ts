/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/stock-transfer-templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List stock transfer templates */
        get: {
            parameters: {
                query?: {
                    q?: string;
                    sourceBranchId?: string;
                    destinationBranchId?: string;
                    limit?: string;
                    cursor?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                items: {
                                    id: string;
                                    tenantId: string;
                                    name: string;
                                    description: string | null;
                                    sourceBranchId: string;
                                    destinationBranchId: string;
                                    createdByUserId: string;
                                    items: {
                                        id: string;
                                        templateId: string;
                                        productId: string;
                                        defaultQty: number;
                                        product: {
                                            id: string;
                                            productName: string;
                                            productSku: string;
                                            productPricePence: number;
                                        };
                                        createdAt: string;
                                        updatedAt: string;
                                    }[];
                                    sourceBranch: {
                                        id: string;
                                        branchName: string;
                                        branchSlug: string;
                                    };
                                    destinationBranch: {
                                        id: string;
                                        branchName: string;
                                        branchSlug: string;
                                    };
                                    createdByUser: {
                                        id: string;
                                        userEmailAddress: string;
                                    };
                                    createdAt: string;
                                    updatedAt: string;
                                }[];
                                pageInfo: {
                                    hasNextPage: boolean;
                                    nextCursor: string | null;
                                };
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a stock transfer template */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        name: string;
                        description?: string;
                        sourceBranchId: string;
                        destinationBranchId: string;
                        items: {
                            productId: string;
                            defaultQty: number;
                        }[];
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                id: string;
                                tenantId: string;
                                name: string;
                                description: string | null;
                                sourceBranchId: string;
                                destinationBranchId: string;
                                createdByUserId: string;
                                items: {
                                    id: string;
                                    templateId: string;
                                    productId: string;
                                    defaultQty: number;
                                    product: {
                                        id: string;
                                        productName: string;
                                        productSku: string;
                                        productPricePence: number;
                                    };
                                    createdAt: string;
                                    updatedAt: string;
                                }[];
                                sourceBranch: {
                                    id: string;
                                    branchName: string;
                                    branchSlug: string;
                                };
                                destinationBranch: {
                                    id: string;
                                    branchName: string;
                                    branchSlug: string;
                                };
                                createdByUser: {
                                    id: string;
                                    userEmailAddress: string;
                                };
                                createdAt: string;
                                updatedAt: string;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stock-transfer-templates/{templateId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get template details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    templateId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                id: string;
                                tenantId: string;
                                name: string;
                                description: string | null;
                                sourceBranchId: string;
                                destinationBranchId: string;
                                createdByUserId: string;
                                items: {
                                    id: string;
                                    templateId: string;
                                    productId: string;
                                    defaultQty: number;
                                    product: {
                                        id: string;
                                        productName: string;
                                        productSku: string;
                                        productPricePence: number;
                                    };
                                    createdAt: string;
                                    updatedAt: string;
                                }[];
                                sourceBranch: {
                                    id: string;
                                    branchName: string;
                                    branchSlug: string;
                                };
                                destinationBranch: {
                                    id: string;
                                    branchName: string;
                                    branchSlug: string;
                                };
                                createdByUser: {
                                    id: string;
                                    userEmailAddress: string;
                                };
                                createdAt: string;
                                updatedAt: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete template */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    templateId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                success: boolean;
                            };
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Update template */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    templateId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        name?: string;
                        description?: string;
                        sourceBranchId?: string;
                        destinationBranchId?: string;
                        items?: {
                            productId: string;
                            defaultQty: number;
                        }[];
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                id: string;
                                tenantId: string;
                                name: string;
                                description: string | null;
                                sourceBranchId: string;
                                destinationBranchId: string;
                                createdByUserId: string;
                                items: {
                                    id: string;
                                    templateId: string;
                                    productId: string;
                                    defaultQty: number;
                                    product: {
                                        id: string;
                                        productName: string;
                                        productSku: string;
                                        productPricePence: number;
                                    };
                                    createdAt: string;
                                    updatedAt: string;
                                }[];
                                sourceBranch: {
                                    id: string;
                                    branchName: string;
                                    branchSlug: string;
                                };
                                destinationBranch: {
                                    id: string;
                                    branchName: string;
                                    branchSlug: string;
                                };
                                createdByUser: {
                                    id: string;
                                    userEmailAddress: string;
                                };
                                createdAt: string;
                                updatedAt: string;
                            };
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/stock-transfer-templates/{templateId}/duplicate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Duplicate template */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    templateId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        newName?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                id: string;
                                tenantId: string;
                                name: string;
                                description: string | null;
                                sourceBranchId: string;
                                destinationBranchId: string;
                                createdByUserId: string;
                                items: {
                                    id: string;
                                    templateId: string;
                                    productId: string;
                                    defaultQty: number;
                                    product: {
                                        id: string;
                                        productName: string;
                                        productSku: string;
                                        productPricePence: number;
                                    };
                                    createdAt: string;
                                    updatedAt: string;
                                }[];
                                sourceBranch: {
                                    id: string;
                                    branchName: string;
                                    branchSlug: string;
                                };
                                destinationBranch: {
                                    id: string;
                                    branchName: string;
                                    branchSlug: string;
                                };
                                createdByUser: {
                                    id: string;
                                    userEmailAddress: string;
                                };
                                createdAt: string;
                                updatedAt: string;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/sign-in": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["SignInRequestBody"];
                };
            };
            responses: {
                /** @description Signed in */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                isSignedIn: boolean;
                            };
                            error: unknown;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/sign-out": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Signed out */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                isSignedOut: boolean;
                            };
                            error: unknown;
                        };
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Current user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["MeResponseData"];
                            error: unknown;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/switch-tenant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["SwitchTenantRequestBody"];
                };
            };
            responses: {
                /** @description Switched current tenant for the session */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["SwitchTenantResponseData"];
                            error: unknown;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/{productId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    productId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Product */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                product: components["schemas"]["ProductRecord"];
                            };
                            error: unknown;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: {
                    "Idempotency-Key"?: string;
                };
                path: {
                    productId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateProductRequestBody"];
                };
            };
            responses: {
                /** @description Updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                product: components["schemas"]["ProductRecord"];
                            };
                            error: unknown;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: {
                    "Idempotency-Key"?: string;
                };
                path: {
                    productId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Archived (soft deleted) */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                hasDeletedProduct: boolean;
                            };
                            error: unknown;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    cursorId?: string;
                    q?: string;
                    minPricePence?: number;
                    maxPricePence?: number;
                    createdAtFrom?: string;
                    createdAtTo?: string;
                    updatedAtFrom?: string;
                    updatedAtTo?: string;
                    includeArchived?: boolean;
                    archivedFilter?: "no-archived" | "only-archived" | "both";
                    sortBy?: "createdAt" | "updatedAt" | "productName" | "productPricePence";
                    sortDir?: "asc" | "desc";
                    includeTotal?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List products */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["ProductsListResponseData"];
                            error: unknown;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: {
                    "Idempotency-Key"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateProductRequestBody"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                product: components["schemas"]["ProductRecord"];
                            };
                            error: unknown;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/{productId}/restore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: {
                    "Idempotency-Key"?: string;
                };
                path: {
                    productId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Restored from archive */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                product: components["schemas"]["ProductRecord"];
                            };
                            error: unknown;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/{productId}/activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    cursor?: string;
                    occurredFrom?: string;
                    occurredTo?: string;
                    type?: components["schemas"]["ProductActivityType"];
                    /** @description CSV of user IDs to filter by */
                    actorIds?: string;
                    includeFacets?: boolean;
                    includeTotal?: boolean;
                };
                header?: never;
                path: {
                    productId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Product activity (audit + stock ledger) with filters */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["ProductActivityResponseData"];
                            error: unknown;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/by-barcode/{barcode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    branchId?: string;
                };
                header?: never;
                path: {
                    barcode: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Product found by barcode with optional stock information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["BarcodeLookupResponseData"];
                            error: unknown;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tenant-users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    cursorId?: string;
                    q?: string;
                    roleIds?: string;
                    archivedFilter?: "active-only" | "archived-only" | "all";
                    createdAtFrom?: string;
                    createdAtTo?: string;
                    updatedAtFrom?: string;
                    updatedAtTo?: string;
                    sortBy?: "createdAt" | "updatedAt" | "userEmailAddress" | "role";
                    sortDir?: "asc" | "desc";
                    includeTotal?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List tenant users */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["TenantUsersListResponseData"];
                            error: unknown;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateTenantUserBody"];
                };
            };
            responses: {
                /** @description Created/attached user */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                user: components["schemas"]["TenantUserRecord"];
                            };
                            error: unknown;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tenant-users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Tenant user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                user: components["schemas"]["TenantUserRecord"];
                            };
                            error: unknown;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateTenantUserBody"];
                };
            };
            responses: {
                /** @description Updated user/membership */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                user: components["schemas"]["TenantUserRecord"];
                            };
                            error: unknown;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Archived membership */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                hasArchivedMembership: boolean;
                            };
                            error: unknown;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tenant-users/{userId}/restore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Restored archived membership */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                hasRestoredMembership: boolean;
                            };
                            error: unknown;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tenant-users/{userId}/activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    cursor?: string;
                    actorIds?: string;
                    occurredFrom?: string;
                    occurredTo?: string;
                    includeFacets?: boolean;
                    includeTotal?: boolean;
                };
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Tenant user activity (audit events) */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["TenantUserActivityResponseData"];
                            error: unknown;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tenants/{tenantSlug}/theme": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    tenantSlug: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Tenant theme (preset, overrides, logo) */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["TenantThemeResponseData"];
                            error: unknown;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    tenantSlug: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["TenantThemePutBody"];
                };
            };
            responses: {
                /** @description Saved tenant theme */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["TenantThemeResponseData"];
                            error: unknown;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tenants/{tenantSlug}/logo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    tenantSlug: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "multipart/form-data": components["schemas"]["TenantLogoUploadBody"];
                };
            };
            responses: {
                /** @description Uploaded logo and updated tenant branding */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["TenantThemeResponseData"] & {
                                upload: components["schemas"]["UploadInfo"];
                            };
                            error: unknown;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tenants/{tenantSlug}/theme/activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    cursor?: string;
                    occurredFrom?: string;
                    occurredTo?: string;
                    /** @description CSV of user IDs to filter by */
                    actorIds?: string;
                    includeFacets?: boolean;
                    includeTotal?: boolean;
                };
                header?: never;
                path: {
                    tenantSlug: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Tenant theme activity (audit) with filters */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["TenantThemeActivityResponseData"];
                            error: unknown;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Service health */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["HealthResponseData"];
                            error: unknown;
                        };
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Service version */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["VersionResponseData"];
                            error: unknown;
                        };
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/uploads/images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "multipart/form-data": components["schemas"]["MultipartImageUploadBody"];
                };
            };
            responses: {
                /** @description Image uploaded to Supabase Storage */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["GenericUploadResponseData"];
                            error: unknown;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Permission catalogue */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                permissions: components["schemas"]["PermissionRecord"][];
                            };
                            error: unknown;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/roles/{roleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    roleId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Get a single role by id */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["GetRoleResponseData"];
                            error: unknown;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: {
                    "Idempotency-Key"?: string;
                };
                path: {
                    roleId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateRoleBody"];
                };
            };
            responses: {
                /** @description Updated role */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                role: components["schemas"]["RoleRecord"];
                            };
                            error: unknown;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: {
                    "Idempotency-Key"?: string;
                };
                path: {
                    roleId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deleted role */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                hasDeletedRole: boolean;
                            };
                            error: unknown;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    cursorId?: string;
                    q?: string;
                    name?: string;
                    isSystem?: boolean | null;
                    createdAtFrom?: string;
                    createdAtTo?: string;
                    updatedAtFrom?: string;
                    updatedAtTo?: string;
                    /** @description CSV of permission keys, e.g. "products:read,uploads:write" */
                    permissionKeys?: string;
                    /** @description How to match permissionKeys: 'any' (default) or 'all' */
                    permMatch?: "any" | "all";
                    sortBy?: "name" | "createdAt" | "updatedAt" | "isSystem";
                    sortDir?: "asc" | "desc";
                    includeTotal?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List tenant roles */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["RolesListResponseData"];
                            error: unknown;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: {
                    "Idempotency-Key"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateRoleBody"];
                };
            };
            responses: {
                /** @description Created role */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                role: components["schemas"]["RoleRecord"];
                            };
                            error: unknown;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/roles/{roleId}/activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    cursor?: string;
                    occurredFrom?: string;
                    occurredTo?: string;
                    /** @description CSV of user IDs to filter by */
                    actorIds?: string;
                    includeFacets?: boolean;
                    includeTotal?: boolean;
                };
                header?: never;
                path: {
                    roleId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Role activity (audit) with filters */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["RoleActivityResponseData"];
                            error: unknown;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/branches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    cursorId?: string;
                    q?: string;
                    isActive?: boolean;
                    archivedFilter?: "active-only" | "archived-only" | "all";
                    sortBy?: "branchName" | "createdAt" | "updatedAt" | "isActive";
                    sortDir?: "asc" | "desc";
                    includeTotal?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List branches */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["BranchesListResponseData"];
                            error: unknown;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: {
                    "Idempotency-Key"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateBranchRequestBody"];
                };
            };
            responses: {
                /** @description Created branch */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                branch: components["schemas"]["BranchRecord"];
                            };
                            error: unknown;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/branches/{branchId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    branchId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Get a single branch by id */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["GetBranchResponseData"];
                            error: unknown;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: {
                    "Idempotency-Key"?: string;
                };
                path: {
                    branchId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateBranchRequestBody"];
                };
            };
            responses: {
                /** @description Updated branch */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                branch: components["schemas"]["BranchRecord"];
                            };
                            error: unknown;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    branchId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Archived branch */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                success: boolean;
                            };
                            error: unknown;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/branches/{branchId}/restore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    branchId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Restored archived branch */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                success: boolean;
                            };
                            error: unknown;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/branches/{branchId}/activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    cursor?: string;
                    occurredFrom?: string;
                    occurredTo?: string;
                    /** @description CSV of user IDs to filter by */
                    actorIds?: string;
                    includeFacets?: boolean;
                    includeTotal?: boolean;
                };
                header?: never;
                path: {
                    branchId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Branch activity (audit) with filters */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["BranchActivityResponseData"];
                            error: unknown;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stock/receive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ReceiveStockRequestBody"];
                };
            };
            responses: {
                /** @description Stock received */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["ReceiveStockResponseData"];
                            error: unknown;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stock/adjust": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        branchId: string;
                        productId: string;
                        qtyDelta: number;
                        unitCostPence?: number;
                        reason?: string | null;
                        /** Format: date-time */
                        occurredAt?: string;
                    };
                };
            };
            responses: {
                /** @description Stock adjusted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["AdjustStockResponseData"];
                            error: unknown;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stock/consume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ConsumeStockRequestBody"];
                };
            };
            responses: {
                /** @description Stock consumed (FIFO) */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["ConsumeStockResponseData"];
                            error: unknown;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stock/levels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query: {
                    branchId: string;
                    productId: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Current stock levels + open FIFO lots */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["StockLevelsResponseData"];
                            error: unknown;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stock/ledger": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query: {
                    productId: string;
                    branchId?: string;
                    limit?: number;
                    cursorId?: string;
                    sortDir?: "asc" | "desc";
                    occurredFrom?: string;
                    occurredTo?: string;
                    /** @description CSV of movement kinds (RECEIPT,ADJUSTMENT,CONSUMPTION,REVERSAL) */
                    kinds?: string;
                    /** @description Minimum qtyDelta inclusive */
                    minQty?: number;
                    /** @description Maximum qtyDelta inclusive */
                    maxQty?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Stock ledger rows (cursor-paged) */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["StockLedgerListResponseData"];
                            error: unknown;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stock/levels/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query: {
                    productId: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description All-branches stock levels for a product */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["StockLevelsBulkResponseData"];
                            error: unknown;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/audit/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    cursorId?: string;
                    entityType?: components["schemas"]["AuditEntityType"];
                    entityId?: string;
                    action?: components["schemas"]["AuditAction"];
                    actorUserId?: string;
                    occurredFrom?: string;
                    occurredTo?: string;
                    includeTotal?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List audit events (tenant-scoped) */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["AuditEventsListResponseData"];
                            error: unknown;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/audit/entities/{entityType}/{entityId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    cursorId?: string;
                    action?: components["schemas"]["AuditAction"];
                    actorUserId?: string;
                    occurredFrom?: string;
                    occurredTo?: string;
                };
                header?: never;
                path: {
                    entityType: components["schemas"]["AuditEntityType"];
                    entityId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List audit events for a single entity */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["AuditEventsListResponseData"];
                            error: unknown;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/audit/events/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Audit event */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: components["schemas"]["AuditEventRecord"];
                            error: unknown;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Too Many Requests */
                429: {
                    headers: {
                        "X-RateLimit-Limit": string;
                        "X-RateLimit-Remaining": string;
                        "X-RateLimit-Reset": string;
                        "Retry-After": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
                /** @description Internal Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorEnvelope"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stock-transfers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List stock transfers */
        get: {
            parameters: {
                query?: {
                    branchId?: string;
                    direction?: "inbound" | "outbound";
                    status?: string;
                    /** @description Comma-separated priority values (URGENT,HIGH,NORMAL,LOW) */
                    priority?: string;
                    q?: string;
                    /** @description Default: priority */
                    sortBy?: "requestedAt" | "updatedAt" | "transferNumber" | "status" | "priority";
                    /** @description Default: desc */
                    sortDir?: "asc" | "desc";
                    requestedAtFrom?: string;
                    requestedAtTo?: string;
                    shippedAtFrom?: string;
                    shippedAtTo?: string;
                    limit?: string;
                    cursor?: string;
                    includeTotal?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                items: {
                                    id: string;
                                    tenantId: string;
                                    transferNumber: string;
                                    sourceBranchId: string;
                                    destinationBranchId: string;
                                    /** @enum {string} */
                                    status: "REQUESTED" | "APPROVED" | "REJECTED" | "IN_TRANSIT" | "PARTIALLY_RECEIVED" | "COMPLETED" | "CANCELLED";
                                    /** @enum {string} */
                                    priority: "URGENT" | "HIGH" | "NORMAL" | "LOW";
                                    requestedByUserId: string;
                                    reviewedByUserId: string | null;
                                    shippedByUserId: string | null;
                                    requestedAt: string;
                                    reviewedAt: string | null;
                                    shippedAt: string | null;
                                    completedAt: string | null;
                                    requestNotes: string | null;
                                    reviewNotes: string | null;
                                    isReversal: boolean;
                                    reversalOfId: string | null;
                                    reversedById: string | null;
                                    reversalReason: string | null;
                                    requiresMultiLevelApproval: boolean;
                                    items: {
                                        id: string;
                                        productId: string;
                                        qtyRequested: number;
                                        qtyApproved: number | null;
                                        qtyShipped: number;
                                        qtyReceived: number;
                                        avgUnitCostPence: number | null;
                                        lotsConsumed: {
                                            lotId: string;
                                            qty: number;
                                            unitCostPence: number | null;
                                        }[] | null;
                                        shipmentBatches?: {
                                            batchNumber: number;
                                            qty: number;
                                            shippedAt: string;
                                            shippedByUserId: string;
                                            lotsConsumed: {
                                                lotId: string;
                                                qty: number;
                                                unitCostPence: number | null;
                                            }[];
                                        }[] | null;
                                        product?: {
                                            id: string;
                                            productName: string;
                                            productSku: string;
                                        };
                                    }[];
                                    sourceBranch?: {
                                        id: string;
                                        branchName: string;
                                        branchSlug: string;
                                    };
                                    destinationBranch?: {
                                        id: string;
                                        branchName: string;
                                        branchSlug: string;
                                    };
                                    requestedByUser?: {
                                        id: string;
                                        userEmailAddress: string;
                                    };
                                    reviewedByUser?: {
                                        id: string;
                                        userEmailAddress: string;
                                    } | null;
                                    shippedByUser?: {
                                        id: string;
                                        userEmailAddress: string;
                                    } | null;
                                    createdAt: string;
                                    updatedAt: string;
                                }[];
                                pageInfo: {
                                    hasNextPage: boolean;
                                    nextCursor: string | null;
                                    totalCount?: number;
                                };
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a stock transfer request */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        sourceBranchId: string;
                        destinationBranchId: string;
                        requestNotes?: string;
                        /**
                         * @description Transfer priority (default: NORMAL)
                         * @enum {string}
                         */
                        priority?: "URGENT" | "HIGH" | "NORMAL" | "LOW";
                        items: {
                            productId: string;
                            qtyRequested: number;
                        }[];
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                id: string;
                                tenantId: string;
                                transferNumber: string;
                                sourceBranchId: string;
                                destinationBranchId: string;
                                /** @enum {string} */
                                status: "REQUESTED" | "APPROVED" | "REJECTED" | "IN_TRANSIT" | "PARTIALLY_RECEIVED" | "COMPLETED" | "CANCELLED";
                                /** @enum {string} */
                                priority: "URGENT" | "HIGH" | "NORMAL" | "LOW";
                                requestedByUserId: string;
                                reviewedByUserId: string | null;
                                shippedByUserId: string | null;
                                requestedAt: string;
                                reviewedAt: string | null;
                                shippedAt: string | null;
                                completedAt: string | null;
                                requestNotes: string | null;
                                reviewNotes: string | null;
                                isReversal: boolean;
                                reversalOfId: string | null;
                                reversedById: string | null;
                                reversalReason: string | null;
                                requiresMultiLevelApproval: boolean;
                                items: {
                                    id: string;
                                    productId: string;
                                    qtyRequested: number;
                                    qtyApproved: number | null;
                                    qtyShipped: number;
                                    qtyReceived: number;
                                    avgUnitCostPence: number | null;
                                    lotsConsumed: {
                                        lotId: string;
                                        qty: number;
                                        unitCostPence: number | null;
                                    }[] | null;
                                    shipmentBatches?: {
                                        batchNumber: number;
                                        qty: number;
                                        shippedAt: string;
                                        shippedByUserId: string;
                                        lotsConsumed: {
                                            lotId: string;
                                            qty: number;
                                            unitCostPence: number | null;
                                        }[];
                                    }[] | null;
                                    product?: {
                                        id: string;
                                        productName: string;
                                        productSku: string;
                                    };
                                }[];
                                sourceBranch?: {
                                    id: string;
                                    branchName: string;
                                    branchSlug: string;
                                };
                                destinationBranch?: {
                                    id: string;
                                    branchName: string;
                                    branchSlug: string;
                                };
                                requestedByUser?: {
                                    id: string;
                                    userEmailAddress: string;
                                };
                                reviewedByUser?: {
                                    id: string;
                                    userEmailAddress: string;
                                } | null;
                                shippedByUser?: {
                                    id: string;
                                    userEmailAddress: string;
                                } | null;
                                createdAt: string;
                                updatedAt: string;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stock-transfers/{transferId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get transfer details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    transferId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                id: string;
                                tenantId: string;
                                transferNumber: string;
                                sourceBranchId: string;
                                destinationBranchId: string;
                                /** @enum {string} */
                                status: "REQUESTED" | "APPROVED" | "REJECTED" | "IN_TRANSIT" | "PARTIALLY_RECEIVED" | "COMPLETED" | "CANCELLED";
                                /** @enum {string} */
                                priority: "URGENT" | "HIGH" | "NORMAL" | "LOW";
                                requestedByUserId: string;
                                reviewedByUserId: string | null;
                                shippedByUserId: string | null;
                                requestedAt: string;
                                reviewedAt: string | null;
                                shippedAt: string | null;
                                completedAt: string | null;
                                requestNotes: string | null;
                                reviewNotes: string | null;
                                isReversal: boolean;
                                reversalOfId: string | null;
                                reversedById: string | null;
                                reversalReason: string | null;
                                requiresMultiLevelApproval: boolean;
                                items: {
                                    id: string;
                                    productId: string;
                                    qtyRequested: number;
                                    qtyApproved: number | null;
                                    qtyShipped: number;
                                    qtyReceived: number;
                                    avgUnitCostPence: number | null;
                                    lotsConsumed: {
                                        lotId: string;
                                        qty: number;
                                        unitCostPence: number | null;
                                    }[] | null;
                                    shipmentBatches?: {
                                        batchNumber: number;
                                        qty: number;
                                        shippedAt: string;
                                        shippedByUserId: string;
                                        lotsConsumed: {
                                            lotId: string;
                                            qty: number;
                                            unitCostPence: number | null;
                                        }[];
                                    }[] | null;
                                    product?: {
                                        id: string;
                                        productName: string;
                                        productSku: string;
                                    };
                                }[];
                                sourceBranch?: {
                                    id: string;
                                    branchName: string;
                                    branchSlug: string;
                                };
                                destinationBranch?: {
                                    id: string;
                                    branchName: string;
                                    branchSlug: string;
                                };
                                requestedByUser?: {
                                    id: string;
                                    userEmailAddress: string;
                                };
                                reviewedByUser?: {
                                    id: string;
                                    userEmailAddress: string;
                                } | null;
                                shippedByUser?: {
                                    id: string;
                                    userEmailAddress: string;
                                } | null;
                                createdAt: string;
                                updatedAt: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Cancel transfer (REQUESTED only) */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    transferId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stock-transfers/{transferId}/review": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Approve or reject transfer */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    transferId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        action: "approve" | "reject";
                        reviewNotes?: string;
                        items?: {
                            itemId: string;
                            qtyApproved: number;
                        }[];
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                id: string;
                                tenantId: string;
                                transferNumber: string;
                                sourceBranchId: string;
                                destinationBranchId: string;
                                /** @enum {string} */
                                status: "REQUESTED" | "APPROVED" | "REJECTED" | "IN_TRANSIT" | "PARTIALLY_RECEIVED" | "COMPLETED" | "CANCELLED";
                                /** @enum {string} */
                                priority: "URGENT" | "HIGH" | "NORMAL" | "LOW";
                                requestedByUserId: string;
                                reviewedByUserId: string | null;
                                shippedByUserId: string | null;
                                requestedAt: string;
                                reviewedAt: string | null;
                                shippedAt: string | null;
                                completedAt: string | null;
                                requestNotes: string | null;
                                reviewNotes: string | null;
                                isReversal: boolean;
                                reversalOfId: string | null;
                                reversedById: string | null;
                                reversalReason: string | null;
                                requiresMultiLevelApproval: boolean;
                                items: {
                                    id: string;
                                    productId: string;
                                    qtyRequested: number;
                                    qtyApproved: number | null;
                                    qtyShipped: number;
                                    qtyReceived: number;
                                    avgUnitCostPence: number | null;
                                    lotsConsumed: {
                                        lotId: string;
                                        qty: number;
                                        unitCostPence: number | null;
                                    }[] | null;
                                    shipmentBatches?: {
                                        batchNumber: number;
                                        qty: number;
                                        shippedAt: string;
                                        shippedByUserId: string;
                                        lotsConsumed: {
                                            lotId: string;
                                            qty: number;
                                            unitCostPence: number | null;
                                        }[];
                                    }[] | null;
                                    product?: {
                                        id: string;
                                        productName: string;
                                        productSku: string;
                                    };
                                }[];
                                sourceBranch?: {
                                    id: string;
                                    branchName: string;
                                    branchSlug: string;
                                };
                                destinationBranch?: {
                                    id: string;
                                    branchName: string;
                                    branchSlug: string;
                                };
                                requestedByUser?: {
                                    id: string;
                                    userEmailAddress: string;
                                };
                                reviewedByUser?: {
                                    id: string;
                                    userEmailAddress: string;
                                } | null;
                                shippedByUser?: {
                                    id: string;
                                    userEmailAddress: string;
                                } | null;
                                createdAt: string;
                                updatedAt: string;
                            };
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/stock-transfers/{transferId}/ship": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Ship approved transfer (supports partial shipments) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    transferId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description Optional: Partial shipment items. If not provided, ships all approved quantities. */
                        items?: {
                            itemId: string;
                            qtyToShip: number;
                        }[];
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                id: string;
                                tenantId: string;
                                transferNumber: string;
                                sourceBranchId: string;
                                destinationBranchId: string;
                                /** @enum {string} */
                                status: "REQUESTED" | "APPROVED" | "REJECTED" | "IN_TRANSIT" | "PARTIALLY_RECEIVED" | "COMPLETED" | "CANCELLED";
                                /** @enum {string} */
                                priority: "URGENT" | "HIGH" | "NORMAL" | "LOW";
                                requestedByUserId: string;
                                reviewedByUserId: string | null;
                                shippedByUserId: string | null;
                                requestedAt: string;
                                reviewedAt: string | null;
                                shippedAt: string | null;
                                completedAt: string | null;
                                requestNotes: string | null;
                                reviewNotes: string | null;
                                isReversal: boolean;
                                reversalOfId: string | null;
                                reversedById: string | null;
                                reversalReason: string | null;
                                requiresMultiLevelApproval: boolean;
                                items: {
                                    id: string;
                                    productId: string;
                                    qtyRequested: number;
                                    qtyApproved: number | null;
                                    qtyShipped: number;
                                    qtyReceived: number;
                                    avgUnitCostPence: number | null;
                                    lotsConsumed: {
                                        lotId: string;
                                        qty: number;
                                        unitCostPence: number | null;
                                    }[] | null;
                                    shipmentBatches?: {
                                        batchNumber: number;
                                        qty: number;
                                        shippedAt: string;
                                        shippedByUserId: string;
                                        lotsConsumed: {
                                            lotId: string;
                                            qty: number;
                                            unitCostPence: number | null;
                                        }[];
                                    }[] | null;
                                    product?: {
                                        id: string;
                                        productName: string;
                                        productSku: string;
                                    };
                                }[];
                                sourceBranch?: {
                                    id: string;
                                    branchName: string;
                                    branchSlug: string;
                                };
                                destinationBranch?: {
                                    id: string;
                                    branchName: string;
                                    branchSlug: string;
                                };
                                requestedByUser?: {
                                    id: string;
                                    userEmailAddress: string;
                                };
                                reviewedByUser?: {
                                    id: string;
                                    userEmailAddress: string;
                                } | null;
                                shippedByUser?: {
                                    id: string;
                                    userEmailAddress: string;
                                } | null;
                                createdAt: string;
                                updatedAt: string;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stock-transfers/{transferId}/receive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Receive transferred items */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    transferId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        items: {
                            itemId: string;
                            qtyReceived: number;
                        }[];
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                id: string;
                                tenantId: string;
                                transferNumber: string;
                                sourceBranchId: string;
                                destinationBranchId: string;
                                /** @enum {string} */
                                status: "REQUESTED" | "APPROVED" | "REJECTED" | "IN_TRANSIT" | "PARTIALLY_RECEIVED" | "COMPLETED" | "CANCELLED";
                                /** @enum {string} */
                                priority: "URGENT" | "HIGH" | "NORMAL" | "LOW";
                                requestedByUserId: string;
                                reviewedByUserId: string | null;
                                shippedByUserId: string | null;
                                requestedAt: string;
                                reviewedAt: string | null;
                                shippedAt: string | null;
                                completedAt: string | null;
                                requestNotes: string | null;
                                reviewNotes: string | null;
                                isReversal: boolean;
                                reversalOfId: string | null;
                                reversedById: string | null;
                                reversalReason: string | null;
                                requiresMultiLevelApproval: boolean;
                                items: {
                                    id: string;
                                    productId: string;
                                    qtyRequested: number;
                                    qtyApproved: number | null;
                                    qtyShipped: number;
                                    qtyReceived: number;
                                    avgUnitCostPence: number | null;
                                    lotsConsumed: {
                                        lotId: string;
                                        qty: number;
                                        unitCostPence: number | null;
                                    }[] | null;
                                    shipmentBatches?: {
                                        batchNumber: number;
                                        qty: number;
                                        shippedAt: string;
                                        shippedByUserId: string;
                                        lotsConsumed: {
                                            lotId: string;
                                            qty: number;
                                            unitCostPence: number | null;
                                        }[];
                                    }[] | null;
                                    product?: {
                                        id: string;
                                        productName: string;
                                        productSku: string;
                                    };
                                }[];
                                sourceBranch?: {
                                    id: string;
                                    branchName: string;
                                    branchSlug: string;
                                };
                                destinationBranch?: {
                                    id: string;
                                    branchName: string;
                                    branchSlug: string;
                                };
                                requestedByUser?: {
                                    id: string;
                                    userEmailAddress: string;
                                };
                                reviewedByUser?: {
                                    id: string;
                                    userEmailAddress: string;
                                } | null;
                                shippedByUser?: {
                                    id: string;
                                    userEmailAddress: string;
                                } | null;
                                createdAt: string;
                                updatedAt: string;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stock-transfers/{transferId}/reverse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reverse a completed transfer */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    transferId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        reversalReason?: string;
                    };
                };
            };
            responses: {
                /** @description Success - Returns the newly created reversal transfer */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                id: string;
                                tenantId: string;
                                transferNumber: string;
                                sourceBranchId: string;
                                destinationBranchId: string;
                                /** @enum {string} */
                                status: "REQUESTED" | "APPROVED" | "REJECTED" | "IN_TRANSIT" | "PARTIALLY_RECEIVED" | "COMPLETED" | "CANCELLED";
                                /** @enum {string} */
                                priority: "URGENT" | "HIGH" | "NORMAL" | "LOW";
                                requestedByUserId: string;
                                reviewedByUserId: string | null;
                                shippedByUserId: string | null;
                                requestedAt: string;
                                reviewedAt: string | null;
                                shippedAt: string | null;
                                completedAt: string | null;
                                requestNotes: string | null;
                                reviewNotes: string | null;
                                isReversal: boolean;
                                reversalOfId: string | null;
                                reversedById: string | null;
                                reversalReason: string | null;
                                requiresMultiLevelApproval: boolean;
                                items: {
                                    id: string;
                                    productId: string;
                                    qtyRequested: number;
                                    qtyApproved: number | null;
                                    qtyShipped: number;
                                    qtyReceived: number;
                                    avgUnitCostPence: number | null;
                                    lotsConsumed: {
                                        lotId: string;
                                        qty: number;
                                        unitCostPence: number | null;
                                    }[] | null;
                                    shipmentBatches?: {
                                        batchNumber: number;
                                        qty: number;
                                        shippedAt: string;
                                        shippedByUserId: string;
                                        lotsConsumed: {
                                            lotId: string;
                                            qty: number;
                                            unitCostPence: number | null;
                                        }[];
                                    }[] | null;
                                    product?: {
                                        id: string;
                                        productName: string;
                                        productSku: string;
                                    };
                                }[];
                                sourceBranch?: {
                                    id: string;
                                    branchName: string;
                                    branchSlug: string;
                                };
                                destinationBranch?: {
                                    id: string;
                                    branchName: string;
                                    branchSlug: string;
                                };
                                requestedByUser?: {
                                    id: string;
                                    userEmailAddress: string;
                                };
                                reviewedByUser?: {
                                    id: string;
                                    userEmailAddress: string;
                                } | null;
                                shippedByUser?: {
                                    id: string;
                                    userEmailAddress: string;
                                } | null;
                                createdAt: string;
                                updatedAt: string;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stock-transfers/{transferId}/priority": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update transfer priority (REQUESTED or APPROVED only) */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    transferId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        priority: "URGENT" | "HIGH" | "NORMAL" | "LOW";
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                id: string;
                                tenantId: string;
                                transferNumber: string;
                                sourceBranchId: string;
                                destinationBranchId: string;
                                /** @enum {string} */
                                status: "REQUESTED" | "APPROVED" | "REJECTED" | "IN_TRANSIT" | "PARTIALLY_RECEIVED" | "COMPLETED" | "CANCELLED";
                                /** @enum {string} */
                                priority: "URGENT" | "HIGH" | "NORMAL" | "LOW";
                                requestedByUserId: string;
                                reviewedByUserId: string | null;
                                shippedByUserId: string | null;
                                requestedAt: string;
                                reviewedAt: string | null;
                                shippedAt: string | null;
                                completedAt: string | null;
                                requestNotes: string | null;
                                reviewNotes: string | null;
                                isReversal: boolean;
                                reversalOfId: string | null;
                                reversedById: string | null;
                                reversalReason: string | null;
                                requiresMultiLevelApproval: boolean;
                                items: {
                                    id: string;
                                    productId: string;
                                    qtyRequested: number;
                                    qtyApproved: number | null;
                                    qtyShipped: number;
                                    qtyReceived: number;
                                    avgUnitCostPence: number | null;
                                    lotsConsumed: {
                                        lotId: string;
                                        qty: number;
                                        unitCostPence: number | null;
                                    }[] | null;
                                    shipmentBatches?: {
                                        batchNumber: number;
                                        qty: number;
                                        shippedAt: string;
                                        shippedByUserId: string;
                                        lotsConsumed: {
                                            lotId: string;
                                            qty: number;
                                            unitCostPence: number | null;
                                        }[];
                                    }[] | null;
                                    product?: {
                                        id: string;
                                        productName: string;
                                        productSku: string;
                                    };
                                }[];
                                sourceBranch?: {
                                    id: string;
                                    branchName: string;
                                    branchSlug: string;
                                };
                                destinationBranch?: {
                                    id: string;
                                    branchName: string;
                                    branchSlug: string;
                                };
                                requestedByUser?: {
                                    id: string;
                                    userEmailAddress: string;
                                };
                                reviewedByUser?: {
                                    id: string;
                                    userEmailAddress: string;
                                } | null;
                                shippedByUser?: {
                                    id: string;
                                    userEmailAddress: string;
                                } | null;
                                createdAt: string;
                                updatedAt: string;
                            };
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/transfer-approval-rules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List transfer approval rules */
        get: {
            parameters: {
                query?: {
                    isActive?: "true" | "false";
                    archivedFilter?: "active-only" | "archived-only" | "all";
                    sortBy?: "priority" | "name" | "createdAt";
                    sortDir?: "asc" | "desc";
                    limit?: string;
                    cursor?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                items: {
                                    id: string;
                                    tenantId: string;
                                    name: string;
                                    description: string | null;
                                    isActive: boolean;
                                    /** @enum {string} */
                                    approvalMode: "SEQUENTIAL" | "PARALLEL" | "HYBRID";
                                    priority: number;
                                    isArchived: boolean;
                                    archivedAt: string | null;
                                    archivedByUserId: string | null;
                                    conditions: {
                                        id: string;
                                        /** @enum {string} */
                                        conditionType: "TOTAL_QTY_THRESHOLD" | "TOTAL_VALUE_THRESHOLD" | "SOURCE_BRANCH" | "DESTINATION_BRANCH" | "PRODUCT_CATEGORY";
                                        threshold: number | null;
                                        branchId: string | null;
                                        branch?: {
                                            id: string;
                                            branchName: string;
                                            branchSlug: string;
                                        } | null;
                                    }[];
                                    levels: {
                                        id: string;
                                        level: number;
                                        name: string;
                                        requiredRoleId: string | null;
                                        requiredUserId: string | null;
                                        role?: {
                                            id: string;
                                            name: string;
                                        } | null;
                                        user?: {
                                            id: string;
                                            userEmailAddress: string;
                                        } | null;
                                    }[];
                                    createdAt: string;
                                    updatedAt: string;
                                }[];
                                pageInfo: {
                                    hasNextPage: boolean;
                                    nextCursor: string | null;
                                };
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a transfer approval rule */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        name: string;
                        description?: string;
                        isActive?: boolean;
                        /** @enum {string} */
                        approvalMode?: "SEQUENTIAL" | "PARALLEL" | "HYBRID";
                        priority?: number;
                        conditions: {
                            /** @enum {string} */
                            conditionType: "TOTAL_QTY_THRESHOLD" | "TOTAL_VALUE_THRESHOLD" | "SOURCE_BRANCH" | "DESTINATION_BRANCH" | "PRODUCT_CATEGORY";
                            threshold?: number;
                            branchId?: string;
                        }[];
                        levels: {
                            level: number;
                            name: string;
                            requiredRoleId?: string;
                            requiredUserId?: string;
                        }[];
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                id: string;
                                tenantId: string;
                                name: string;
                                description: string | null;
                                isActive: boolean;
                                /** @enum {string} */
                                approvalMode: "SEQUENTIAL" | "PARALLEL" | "HYBRID";
                                priority: number;
                                isArchived: boolean;
                                archivedAt: string | null;
                                archivedByUserId: string | null;
                                conditions: {
                                    id: string;
                                    /** @enum {string} */
                                    conditionType: "TOTAL_QTY_THRESHOLD" | "TOTAL_VALUE_THRESHOLD" | "SOURCE_BRANCH" | "DESTINATION_BRANCH" | "PRODUCT_CATEGORY";
                                    threshold: number | null;
                                    branchId: string | null;
                                    branch?: {
                                        id: string;
                                        branchName: string;
                                        branchSlug: string;
                                    } | null;
                                }[];
                                levels: {
                                    id: string;
                                    level: number;
                                    name: string;
                                    requiredRoleId: string | null;
                                    requiredUserId: string | null;
                                    role?: {
                                        id: string;
                                        name: string;
                                    } | null;
                                    user?: {
                                        id: string;
                                        userEmailAddress: string;
                                    } | null;
                                }[];
                                createdAt: string;
                                updatedAt: string;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/transfer-approval-rules/{ruleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get approval rule details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ruleId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                id: string;
                                tenantId: string;
                                name: string;
                                description: string | null;
                                isActive: boolean;
                                /** @enum {string} */
                                approvalMode: "SEQUENTIAL" | "PARALLEL" | "HYBRID";
                                priority: number;
                                isArchived: boolean;
                                archivedAt: string | null;
                                archivedByUserId: string | null;
                                conditions: {
                                    id: string;
                                    /** @enum {string} */
                                    conditionType: "TOTAL_QTY_THRESHOLD" | "TOTAL_VALUE_THRESHOLD" | "SOURCE_BRANCH" | "DESTINATION_BRANCH" | "PRODUCT_CATEGORY";
                                    threshold: number | null;
                                    branchId: string | null;
                                    branch?: {
                                        id: string;
                                        branchName: string;
                                        branchSlug: string;
                                    } | null;
                                }[];
                                levels: {
                                    id: string;
                                    level: number;
                                    name: string;
                                    requiredRoleId: string | null;
                                    requiredUserId: string | null;
                                    role?: {
                                        id: string;
                                        name: string;
                                    } | null;
                                    user?: {
                                        id: string;
                                        userEmailAddress: string;
                                    } | null;
                                }[];
                                createdAt: string;
                                updatedAt: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Archive approval rule (soft delete) */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ruleId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                id: string;
                                tenantId: string;
                                name: string;
                                description: string | null;
                                isActive: boolean;
                                /** @enum {string} */
                                approvalMode: "SEQUENTIAL" | "PARALLEL" | "HYBRID";
                                priority: number;
                                isArchived: boolean;
                                archivedAt: string | null;
                                archivedByUserId: string | null;
                                conditions: {
                                    id: string;
                                    /** @enum {string} */
                                    conditionType: "TOTAL_QTY_THRESHOLD" | "TOTAL_VALUE_THRESHOLD" | "SOURCE_BRANCH" | "DESTINATION_BRANCH" | "PRODUCT_CATEGORY";
                                    threshold: number | null;
                                    branchId: string | null;
                                    branch?: {
                                        id: string;
                                        branchName: string;
                                        branchSlug: string;
                                    } | null;
                                }[];
                                levels: {
                                    id: string;
                                    level: number;
                                    name: string;
                                    requiredRoleId: string | null;
                                    requiredUserId: string | null;
                                    role?: {
                                        id: string;
                                        name: string;
                                    } | null;
                                    user?: {
                                        id: string;
                                        userEmailAddress: string;
                                    } | null;
                                }[];
                                createdAt: string;
                                updatedAt: string;
                            };
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Update approval rule */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ruleId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        name?: string;
                        description?: string;
                        isActive?: boolean;
                        /** @enum {string} */
                        approvalMode?: "SEQUENTIAL" | "PARALLEL" | "HYBRID";
                        priority?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                id: string;
                                tenantId: string;
                                name: string;
                                description: string | null;
                                isActive: boolean;
                                /** @enum {string} */
                                approvalMode: "SEQUENTIAL" | "PARALLEL" | "HYBRID";
                                priority: number;
                                isArchived: boolean;
                                archivedAt: string | null;
                                archivedByUserId: string | null;
                                conditions: {
                                    id: string;
                                    /** @enum {string} */
                                    conditionType: "TOTAL_QTY_THRESHOLD" | "TOTAL_VALUE_THRESHOLD" | "SOURCE_BRANCH" | "DESTINATION_BRANCH" | "PRODUCT_CATEGORY";
                                    threshold: number | null;
                                    branchId: string | null;
                                    branch?: {
                                        id: string;
                                        branchName: string;
                                        branchSlug: string;
                                    } | null;
                                }[];
                                levels: {
                                    id: string;
                                    level: number;
                                    name: string;
                                    requiredRoleId: string | null;
                                    requiredUserId: string | null;
                                    role?: {
                                        id: string;
                                        name: string;
                                    } | null;
                                    user?: {
                                        id: string;
                                        userEmailAddress: string;
                                    } | null;
                                }[];
                                createdAt: string;
                                updatedAt: string;
                            };
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/transfer-approval-rules/{ruleId}/restore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Restore archived approval rule */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ruleId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                id: string;
                                tenantId: string;
                                name: string;
                                description: string | null;
                                isActive: boolean;
                                /** @enum {string} */
                                approvalMode: "SEQUENTIAL" | "PARALLEL" | "HYBRID";
                                priority: number;
                                isArchived: boolean;
                                archivedAt: string | null;
                                archivedByUserId: string | null;
                                conditions: {
                                    id: string;
                                    /** @enum {string} */
                                    conditionType: "TOTAL_QTY_THRESHOLD" | "TOTAL_VALUE_THRESHOLD" | "SOURCE_BRANCH" | "DESTINATION_BRANCH" | "PRODUCT_CATEGORY";
                                    threshold: number | null;
                                    branchId: string | null;
                                    branch?: {
                                        id: string;
                                        branchName: string;
                                        branchSlug: string;
                                    } | null;
                                }[];
                                levels: {
                                    id: string;
                                    level: number;
                                    name: string;
                                    requiredRoleId: string | null;
                                    requiredUserId: string | null;
                                    role?: {
                                        id: string;
                                        name: string;
                                    } | null;
                                    user?: {
                                        id: string;
                                        userEmailAddress: string;
                                    } | null;
                                }[];
                                createdAt: string;
                                updatedAt: string;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stock-transfers/{transferId}/approve/{level}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit approval for a specific level */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    transferId: string;
                    level: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        notes?: string;
                    };
                };
            };
            responses: {
                /** @description Success - Returns updated transfer with approval records */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data?: unknown;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stock-transfers/{transferId}/approval-progress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get approval progress for a transfer */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    transferId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                requiresApproval: boolean;
                                records: {
                                    id: string;
                                    transferId: string;
                                    level: number;
                                    levelName: string;
                                    /** @enum {string} */
                                    status: "PENDING" | "APPROVED" | "REJECTED" | "SKIPPED";
                                    requiredRoleId: string | null;
                                    requiredUserId: string | null;
                                    approvedByUserId: string | null;
                                    approvedAt: string | null;
                                    notes: string | null;
                                    requiredRole?: {
                                        id: string;
                                        name: string;
                                    } | null;
                                    requiredUser?: {
                                        id: string;
                                        userEmailAddress: string;
                                    } | null;
                                    approvedByUser?: {
                                        id: string;
                                        userEmailAddress: string;
                                    } | null;
                                    createdAt: string;
                                    updatedAt: string;
                                }[];
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stock-transfers/analytics/overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get overview metrics for Transfer Analytics Dashboard */
        get: {
            parameters: {
                query?: {
                    /** @description Start date (ISO 8601 YYYY-MM-DD). Defaults to 30 days ago. */
                    startDate?: string;
                    /** @description End date (ISO 8601 YYYY-MM-DD). Defaults to today. */
                    endDate?: string;
                    /** @description Filter by specific branch (optional) */
                    branchId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                totalTransfers: number;
                                activeTransfers: number;
                                /** @description Average time in seconds for REQUESTED → APPROVED */
                                avgApprovalTime: number;
                                /** @description Average time in seconds for APPROVED → IN_TRANSIT */
                                avgShipTime: number;
                                /** @description Average time in seconds for IN_TRANSIT → COMPLETED */
                                avgReceiveTime: number;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stock-transfers/analytics/volume-chart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get transfer volume chart data (time series) */
        get: {
            parameters: {
                query?: {
                    /** @description Start date (ISO 8601 YYYY-MM-DD). Defaults to 30 days ago. */
                    startDate?: string;
                    /** @description End date (ISO 8601 YYYY-MM-DD). Defaults to today. */
                    endDate?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                /** @description Date (YYYY-MM-DD) */
                                date: string;
                                /** @description Transfers created on this date */
                                created: number;
                                /** @description Transfers approved on this date */
                                approved: number;
                                /** @description Transfers shipped on this date */
                                shipped: number;
                                /** @description Transfers completed on this date */
                                completed: number;
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stock-transfers/analytics/branch-dependencies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get branch dependency data (transfer routes) */
        get: {
            parameters: {
                query?: {
                    /** @description Start date (ISO 8601 YYYY-MM-DD). Defaults to 30 days ago. */
                    startDate?: string;
                    /** @description End date (ISO 8601 YYYY-MM-DD). Defaults to today. */
                    endDate?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                sourceBranch: string;
                                destinationBranch: string;
                                transferCount: number;
                                totalUnits: number;
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stock-transfers/analytics/top-routes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get top transfer routes (sorted by volume) */
        get: {
            parameters: {
                query?: {
                    /** @description Start date (ISO 8601 YYYY-MM-DD). Defaults to 30 days ago. */
                    startDate?: string;
                    /** @description End date (ISO 8601 YYYY-MM-DD). Defaults to today. */
                    endDate?: string;
                    /** @description Max number of routes to return (default: 10) */
                    limit?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                sourceBranch: string;
                                destinationBranch: string;
                                transferCount: number;
                                totalUnits: number;
                                /** @description Average time in seconds from REQUESTED → COMPLETED */
                                avgCompletionTime: number | null;
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stock-transfers/analytics/status-distribution": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get transfer status distribution (pie chart data) */
        get: {
            parameters: {
                query?: {
                    /** @description Start date (ISO 8601 YYYY-MM-DD). Defaults to 30 days ago. */
                    startDate?: string;
                    /** @description End date (ISO 8601 YYYY-MM-DD). Defaults to today. */
                    endDate?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            /** @description Status distribution keyed by status (e.g., { "REQUESTED": 10, "APPROVED": 5 }) */
                            data: {
                                [key: string]: number;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stock-transfers/analytics/bottlenecks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get bottleneck analysis (avg time per stage) */
        get: {
            parameters: {
                query?: {
                    /** @description Start date (ISO 8601 YYYY-MM-DD). Defaults to 30 days ago. */
                    startDate?: string;
                    /** @description End date (ISO 8601 YYYY-MM-DD). Defaults to today. */
                    endDate?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                /** @description Average time in seconds for REQUESTED → APPROVED */
                                approvalStage: number;
                                /** @description Average time in seconds for APPROVED → IN_TRANSIT */
                                shippingStage: number;
                                /** @description Average time in seconds for IN_TRANSIT → COMPLETED */
                                receiptStage: number;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/stock-transfers/analytics/product-frequency": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get product transfer frequency (which products are transferred most) */
        get: {
            parameters: {
                query?: {
                    /** @description Start date (ISO 8601 YYYY-MM-DD). Defaults to 30 days ago. */
                    startDate?: string;
                    /** @description End date (ISO 8601 YYYY-MM-DD). Defaults to today. */
                    endDate?: string;
                    /** @description Max number of products to return (default: 10) */
                    limit?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {boolean} */
                            success: true;
                            data: {
                                productName: string;
                                transferCount: number;
                                totalQty: number;
                                /** @description Top 3 routes for this product */
                                topRoutes: string[];
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        StandardErrorPayload: {
            errorCode: string;
            httpStatusCode: number;
            userFacingMessage: string;
            developerMessage?: string;
            correlationId: string | null;
        };
        ErrorEnvelope: {
            /** @enum {boolean} */
            success: false;
            data: unknown;
            error: components["schemas"]["StandardErrorPayload"];
        };
        SignInRequestBody: {
            /** Format: email */
            email: string;
            password: string;
            tenantSlug: string;
        };
        RoleBrief: {
            id: string;
            name: string;
        };
        TenantMembership: {
            tenantSlug: string;
            role: components["schemas"]["RoleBrief"];
        };
        /** @enum {string} */
        PermissionKey: "products:read" | "products:write" | "users:manage" | "roles:manage" | "tenant:manage" | "theme:manage" | "uploads:write" | "branches:manage" | "stock:read" | "stock:write" | "stock:allocate" | "reports:view";
        BranchMembershipBrief: {
            branchId: string;
            branchName: string;
        };
        MeResponseData: {
            user: {
                id: string;
                /** Format: email */
                userEmailAddress: string;
            };
            tenantMemberships: components["schemas"]["TenantMembership"][];
            currentTenant: {
                tenantId: string;
                tenantSlug: string;
                role: components["schemas"]["RoleBrief"];
            } | null;
            permissionsCurrentTenant: components["schemas"]["PermissionKey"][];
            branchMembershipsCurrentTenant: components["schemas"]["BranchMembershipBrief"][];
        };
        SwitchTenantResponseData: {
            hasSwitchedTenant: boolean;
        };
        SwitchTenantRequestBody: {
            tenantSlug: string;
        };
        ProductRecord: {
            id: string;
            tenantId: string;
            productName: string;
            productSku: string;
            productPricePence: number;
            barcode?: string | null;
            barcodeType?: string | null;
            isArchived: boolean;
            /** Format: date-time */
            archivedAt?: string | null;
            archivedByUserId?: string | null;
            entityVersion: number;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        ProductsListResponseData: {
            items: components["schemas"]["ProductRecord"][];
            pageInfo: {
                hasNextPage: boolean;
                nextCursor?: string | null;
                totalCount?: number;
            };
            applied: {
                limit: number;
                sort: {
                    /** @enum {string} */
                    field: "createdAt" | "updatedAt" | "productName" | "productPricePence";
                    /** @enum {string} */
                    direction: "asc" | "desc";
                };
                filters: {
                    q?: string;
                    minPricePence?: number;
                    maxPricePence?: number;
                    createdAtFrom?: string;
                    createdAtTo?: string;
                    updatedAtFrom?: string;
                    updatedAtTo?: string;
                };
            };
        };
        CreateProductRequestBody: {
            productName: string;
            productSku: string;
            productPricePence: number;
            barcode?: string;
            /** @enum {string} */
            barcodeType?: "EAN13" | "UPCA" | "CODE128" | "QR";
        };
        UpdateProductRequestBody: {
            productName?: string;
            productPricePence?: number;
            barcode?: string | null;
            /** @enum {string|null} */
            barcodeType?: "EAN13" | "UPCA" | "CODE128" | "QR" | null;
            currentEntityVersion: number;
        };
        ProductActivityActor: {
            userId: string;
            display: string;
        } | null;
        ProductActivityItemAudit: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            kind: "audit";
            id: string;
            /** Format: date-time */
            when: string;
            action: string;
            message: string;
            messageParts?: {
                [key: string]: unknown;
            };
            actor?: components["schemas"]["ProductActivityActor"];
            correlationId?: string | null;
            entityName?: string | null;
        };
        ProductActivityItemLedger: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            kind: "ledger";
            id: string;
            /** Format: date-time */
            when: string;
            /** @enum {string} */
            entryKind: "RECEIPT" | "ADJUSTMENT" | "CONSUMPTION" | "REVERSAL";
            qtyDelta: number;
            branchId?: string | null;
            branchName?: string | null;
            reason?: string | null;
            lotId?: string | null;
            message: string;
            messageParts?: {
                [key: string]: unknown;
            };
            actor?: components["schemas"]["ProductActivityActor"];
            correlationId?: string | null;
        };
        ProductActivityItem: components["schemas"]["ProductActivityItemAudit"] | components["schemas"]["ProductActivityItemLedger"];
        PageInfo: {
            hasNextPage: boolean;
            nextCursor: string | null;
            totalCount?: number;
        };
        PageInfoWithTotal: components["schemas"]["PageInfo"] & Record<string, never>;
        ActorRef: {
            userId: string;
            display: string;
        };
        ProductActivityResponseData: {
            items: components["schemas"]["ProductActivityItem"][];
            pageInfo: components["schemas"]["PageInfoWithTotal"];
            facets?: {
                actors: components["schemas"]["ActorRef"][];
            };
        };
        /** @enum {string} */
        ProductActivityType: "all" | "audit" | "ledger";
        ProductWithStock: {
            id: string;
            tenantId: string;
            productName: string;
            productSku: string;
            productPricePence: number;
            barcode?: string | null;
            barcodeType?: string | null;
            isArchived: boolean;
            /** Format: date-time */
            archivedAt?: string | null;
            archivedByUserId?: string | null;
            entityVersion: number;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            stock?: {
                branchId: string;
                branchName: string;
                qtyOnHand: number;
                qtyAllocated: number;
            } | null;
        };
        BarcodeLookupResponseData: {
            product: components["schemas"]["ProductWithStock"];
        };
        RoleSummary: {
            id: string;
            name: string;
            description: string | null;
            isSystem: boolean;
            tenantId: string;
            permissions: components["schemas"]["PermissionKey"][];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        } | null;
        BranchSummary: {
            id: string;
            branchName: string;
            isActive: boolean;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        TenantUserRecord: {
            userId: string;
            /** Format: email */
            userEmailAddress: string;
            role: components["schemas"]["RoleSummary"];
            /** @default [] */
            branches: components["schemas"]["BranchSummary"][];
            isArchived: boolean;
            /** Format: date-time */
            archivedAt: string | null;
            archivedByUserId: string | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        TenantUsersListResponseData: {
            items: components["schemas"]["TenantUserRecord"][];
            pageInfo: {
                hasNextPage: boolean;
                nextCursor?: string | null;
                totalCount?: number;
            };
            applied: {
                limit: number;
                sort: {
                    /** @enum {string} */
                    field: "createdAt" | "updatedAt" | "userEmailAddress" | "role";
                    /** @enum {string} */
                    direction: "asc" | "desc";
                };
                filters: {
                    q?: string;
                    roleIds?: string[];
                    createdAtFrom?: string;
                    createdAtTo?: string;
                    updatedAtFrom?: string;
                    updatedAtTo?: string;
                };
            };
        };
        CreateTenantUserBody: {
            /** Format: email */
            email: string;
            password: string;
            roleId: string;
            branchIds?: string[];
        };
        UpdateTenantUserBody: {
            /** Format: email */
            email?: string;
            password?: string;
            roleId?: string;
            branchIds?: string[];
        };
        TenantUserActivityItem: {
            /** @enum {string} */
            kind: "audit";
            id: string;
            /** Format: date-time */
            when: string;
            action: string;
            message: string;
            messageParts?: {
                [key: string]: unknown;
            } | null;
            actor?: {
                userId: string;
                display: string;
            } | null;
            correlationId?: string | null;
        };
        TenantUserActivityResponseData: {
            items: components["schemas"]["TenantUserActivityItem"][];
            pageInfo: {
                hasNextPage: boolean;
                nextCursor?: string | null;
                totalCount?: number;
            };
            facets?: {
                actors: {
                    userId: string;
                    display: string;
                }[];
            };
            applied: {
                limit: number;
                filters: {
                    actorIds?: string[];
                    occurredFrom?: string;
                    occurredTo?: string;
                };
            };
        };
        /** @enum {string|null} */
        PresetKey: "classicBlue" | "rubyDark" | "emeraldLight" | "oceanLight" | "violetLight" | "grapeDark" | "tealDark" | "cyanLight" | "orangeLight" | "limeLight" | "pinkDark" | "yellowLight" | null;
        /** @default {} */
        ThemeOverrides: {
            /** @enum {string} */
            colorScheme?: "light" | "dark";
            primaryColor?: string;
            primaryShade?: number | {
                light?: number;
                dark?: number;
            };
            colors?: {
                [key: string]: string[];
            };
            defaultRadius?: string;
            fontFamily?: string;
        };
        TenantThemeResponseData: {
            presetKey: components["schemas"]["PresetKey"];
            overrides?: components["schemas"]["ThemeOverrides"];
            /**
             * Format: uri
             * @default null
             */
            logoUrl: string | null;
            /** Format: date-time */
            updatedAt: string | null;
            /** Format: date-time */
            createdAt: string | null;
        };
        TenantThemePutBody: {
            presetKey?: components["schemas"]["PresetKey"];
            overrides?: components["schemas"]["ThemeOverrides"];
            /** Format: uri */
            logoUrl?: string | null;
        };
        UploadInfo: {
            /** Format: uri */
            url: string;
            path: string;
            contentType: string;
            bytes: number;
        };
        TenantLogoUploadBody: {
            /**
             * Format: binary
             * @description File blob
             */
            file?: string;
        };
        TenantThemeActivityItem: {
            /** @enum {string} */
            kind: "audit";
            id: string;
            /** Format: date-time */
            when: string;
            action: string;
            message: string;
            messageParts?: {
                [key: string]: unknown;
            };
            actor?: components["schemas"]["ActorRef"] & unknown;
            correlationId?: string | null;
        };
        TenantThemeActivityResponseData: {
            items: components["schemas"]["TenantThemeActivityItem"][];
            pageInfo: components["schemas"]["PageInfoWithTotal"] & {
                hasNextPage: boolean;
                nextCursor?: string | null;
                totalCount?: number;
            };
            facets?: {
                actors: components["schemas"]["ActorRef"][];
            };
        };
        HealthResponseData: {
            serviceName: string;
            /**
             * @default HEALTHY
             * @enum {string}
             */
            healthStatus: "HEALTHY" | "UNHEALTHY";
        };
        VersionResponseData: {
            serviceName: string;
            semanticVersion: string;
        };
        GenericUploadResponseData: {
            upload: components["schemas"]["UploadInfo"];
        };
        /** @enum {string} */
        UploadKind: "logo" | "product" | "user" | "misc";
        MultipartImageUploadBody: {
            /**
             * Format: binary
             * @description File blob
             */
            file?: string;
            kind?: components["schemas"]["UploadKind"];
        };
        PermissionRecord: {
            id: string;
            key: components["schemas"]["PermissionKey"];
            description: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        RoleRecord: {
            id: string;
            tenantId: string;
            name: string;
            description: string | null;
            isSystem: boolean;
            permissions: components["schemas"]["PermissionKey"][];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        GetRoleResponseData: {
            role: components["schemas"]["RoleRecord"];
        };
        /** @enum {string} */
        PermMatch: "any" | "all";
        RolesListResponseData: {
            items: components["schemas"]["RoleRecord"][];
            pageInfo: {
                hasNextPage: boolean;
                nextCursor?: string | null;
                totalCount?: number;
            };
            applied: {
                limit: number;
                sort: {
                    /** @enum {string} */
                    field: "name" | "createdAt" | "updatedAt" | "isSystem";
                    /** @enum {string} */
                    direction: "asc" | "desc";
                };
                filters: {
                    q?: string;
                    name?: string;
                    isSystem?: boolean;
                    createdAtFrom?: string;
                    createdAtTo?: string;
                    updatedAtFrom?: string;
                    updatedAtTo?: string;
                    permissionKeys?: components["schemas"]["PermissionKey"][];
                    permMatch?: components["schemas"]["PermMatch"];
                };
            };
        };
        CreateRoleBody: {
            name: string;
            description?: string | null;
            permissionKeys: components["schemas"]["PermissionKey"][];
        };
        UpdateRoleBody: {
            name?: string;
            description?: string | null;
            permissionKeys?: components["schemas"]["PermissionKey"][];
        };
        RoleActivityActor: {
            userId: string;
            display: string;
        } | null;
        RoleActivityItem: {
            /** @enum {string} */
            kind: "audit";
            id: string;
            /** Format: date-time */
            when: string;
            action: string;
            message: string;
            messageParts?: {
                [key: string]: unknown;
            };
            actor?: components["schemas"]["RoleActivityActor"];
            correlationId?: string | null;
            entityName?: string | null;
        };
        RoleActivityResponseData: {
            items: components["schemas"]["RoleActivityItem"][];
            pageInfo: {
                hasNextPage: boolean;
                nextCursor?: string | null;
                totalCount?: number;
            };
            facets?: {
                actors: {
                    userId: string;
                    display: string;
                }[];
            };
        };
        BranchRecord: {
            id: string;
            tenantId: string;
            branchSlug: string;
            branchName: string;
            isActive: boolean;
            isArchived: boolean;
            /** Format: date-time */
            archivedAt: string | null;
            archivedByUserId: string | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        BranchesListResponseData: {
            items: components["schemas"]["BranchRecord"][];
            pageInfo: {
                hasNextPage: boolean;
                nextCursor?: string | null;
                totalCount?: number;
            };
            applied: {
                limit: number;
                sort: {
                    /** @enum {string} */
                    field: "branchName" | "createdAt" | "updatedAt" | "isActive";
                    /** @enum {string} */
                    direction: "asc" | "desc";
                };
                filters: {
                    q?: string;
                    isActive?: boolean;
                    /** @enum {string} */
                    archivedFilter?: "active-only" | "archived-only" | "all";
                };
            };
        };
        GetBranchResponseData: {
            branch: components["schemas"]["BranchRecord"];
        };
        CreateBranchRequestBody: {
            branchSlug: string;
            branchName: string;
            isActive?: boolean;
        };
        UpdateBranchRequestBody: {
            branchSlug?: string;
            branchName?: string;
            isActive?: boolean;
        };
        BranchActivityActor: {
            userId: string;
            display: string;
        } | null;
        BranchActivityItem: {
            /** @enum {string} */
            kind: "audit";
            id: string;
            /** Format: date-time */
            when: string;
            action: string;
            message: string;
            messageParts?: {
                [key: string]: unknown;
            };
            actor?: components["schemas"]["BranchActivityActor"];
            correlationId?: string | null;
            entityName?: string | null;
        };
        BranchActivityResponseData: {
            items: components["schemas"]["BranchActivityItem"][];
            pageInfo: {
                hasNextPage: boolean;
                nextCursor?: string | null;
                totalCount?: number;
            };
            facets?: {
                actors: {
                    userId: string;
                    display: string;
                }[];
            };
        };
        StockLotRecord: {
            id: string;
            tenantId: string;
            branchId: string;
            productId: string;
            qtyReceived: number;
            qtyRemaining: number;
            unitCostPence?: number | null;
            sourceRef?: string | null;
            /** Format: date-time */
            receivedAt: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        /** @enum {string} */
        StockMovementKind: "RECEIPT" | "ADJUSTMENT" | "CONSUMPTION" | "REVERSAL";
        StockLedgerRecord: {
            id: string;
            tenantId: string;
            branchId: string;
            productId: string;
            lotId: string | null;
            kind: components["schemas"]["StockMovementKind"];
            qtyDelta: number;
            reason?: string | null;
            actorUserId?: string | null;
            /** Format: date-time */
            occurredAt: string;
            /** Format: date-time */
            createdAt: string;
        };
        ProductStockRecord: {
            id: string;
            tenantId: string;
            branchId: string;
            productId: string;
            qtyOnHand: number;
            qtyAllocated: number;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        ReceiveStockResponseData: {
            lot: components["schemas"]["StockLotRecord"];
            ledger: components["schemas"]["StockLedgerRecord"];
            productStock: components["schemas"]["ProductStockRecord"];
        };
        ReceiveStockRequestBody: {
            branchId: string;
            productId: string;
            qty: number;
            unitCostPence?: number | null;
            sourceRef?: string | null;
            reason?: string | null;
            /** Format: date-time */
            occurredAt?: string;
        };
        AdjustStockResponseData: {
            lot: {
                id: string;
                qtyReceived: number;
                qtyRemaining: number;
                /** Format: date-time */
                receivedAt: string;
            };
            ledgerId: string;
            productStock: components["schemas"]["ProductStockRecord"];
        } | {
            affected: {
                lotId: string;
                take: number;
                ledgerId: string;
            }[];
            productStock: components["schemas"]["ProductStockRecord"];
        };
        ConsumeStockResponseData: {
            affected: {
                lotId: string;
                take: number;
                ledgerId: string;
            }[];
            productStock: components["schemas"]["ProductStockRecord"];
        };
        ConsumeStockRequestBody: {
            branchId: string;
            productId: string;
            qty: number;
            reason?: string | null;
            /** Format: date-time */
            occurredAt?: string;
        };
        ProductStockLevelsSnapshot: {
            tenantId: string;
            branchId: string;
            productId: string;
            qtyOnHand: number;
            qtyAllocated: number;
        };
        StockLevelsResponseData: {
            productStock: components["schemas"]["ProductStockLevelsSnapshot"];
            lots: components["schemas"]["StockLotRecord"][];
        };
        StockLedgerListResponseData: {
            items: components["schemas"]["StockLedgerRecord"][];
            pageInfo: components["schemas"]["PageInfo"];
            applied: {
                limit: number;
                sort: {
                    field: string;
                    /** @enum {string} */
                    direction: "asc" | "desc";
                };
                filters: {
                    [key: string]: unknown;
                };
            };
        };
        StockLevelsBulkItem: {
            branchId: string;
            branchName: string;
            productStock: components["schemas"]["ProductStockLevelsSnapshot"];
            lots: components["schemas"]["StockLotRecord"][];
        };
        StockLevelsBulkResponseData: {
            items: components["schemas"]["StockLevelsBulkItem"][];
        };
        /** @enum {string} */
        AuditEntityType: "PRODUCT" | "BRANCH" | "STOCK_LOT" | "STOCK_LEDGER" | "PRODUCT_STOCK" | "USER" | "ROLE" | "TENANT" | "TENANT_BRANDING";
        /** @enum {string} */
        AuditAction: "CREATE" | "UPDATE" | "DELETE" | "STOCK_RECEIVE" | "STOCK_ADJUST" | "STOCK_CONSUME" | "ROLE_ASSIGN" | "ROLE_REVOKE" | "LOGIN" | "LOGOUT" | "THEME_UPDATE" | "THEME_LOGO_UPDATE";
        AuditEventRecord: {
            id: string;
            tenantId: string;
            actorUserId: string | null;
            entityType: components["schemas"]["AuditEntityType"];
            entityId: string;
            action: components["schemas"]["AuditAction"];
            entityName: string | null;
            beforeJson?: unknown;
            afterJson?: unknown;
            diffJson?: unknown;
            correlationId: string | null;
            ip: string | null;
            userAgent: string | null;
            /** Format: date-time */
            createdAt: string;
        };
        AuditEventsListResponseData: {
            items: components["schemas"]["AuditEventRecord"][];
            pageInfo: {
                hasNextPage: boolean;
                nextCursor?: string | null;
                totalCount?: number;
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
